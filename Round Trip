#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define rep(i, st, ed) for (int i = st; i < ed; i++)

// SUBPROBLEM
// --- cycle detection
// --- backtrack

bool dfs(vector<int> adj[], int node, vector<int> &vis, vector<int> &back, int par, int &cycle_node)
{
  vis[node] = 1;
  back[node] = par;

  for (auto &adjnode : adj[node])
  {
    if (vis[adjnode] == 0)
    {
      if (dfs(adj, adjnode, vis, back, node, cycle_node) == true)
        return true;
    }
    else if (par != adjnode)
    {
      cycle_node = node;
      back[adjnode] = node;
      return true;
    }
  }

  return false;
}

vector<int> backTrack(vector<int> &back, int start)
{
  vector<int> res;
  int temp = start;
  res.push_back(temp);
  start = back[start];
  while (start != temp)
  {
    res.push_back(start);
    start = back[start];
  }
  res.push_back(temp);
  return res;
}
int main()
{
  int n, m;
  cin >> n >> m;
  vector<int> adj[n + 1];
  while (m--)
  {
    int u, v;
    cin >> u >> v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }

  vector<int> vis(n + 1), back(n + 1);
  int start = -1;
  bool possible = false;
  for (int i = 1; i <= n; i++)
    if (vis[i] == 0)
    {
      possible = dfs(adj, i, vis, back, -1, start);
      if (possible)
        break;
    }

  if (!possible)
  {
    cout << "IMPOSSIBLE\n";
  }
  else
  {
    vector<int> res = backTrack(back, start);
    cout << res.size();
    cout << endl;
    rep(i, 0, res.size())
            cout
        << res[i] << " ";
    cout << endl;
  }
}
