#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define rep(i, st, ed) for (int i = st; i < ed; i++)

// SUBPROBLEM
//-- component
//-- representative of each component 
// ==>  DSU
class DSU
{
public:
  vector<int> parent;
  vector<int> size;
  DSU(int n)
  {
    parent.resize(n + 1);
    size.resize(n + 1);
    for (int i = 1; i <= n; i++)
    {
      parent[i] = i;
      size[i] = 1;
    }
  }

  int findUPar(int node)
  {
    if (parent[node] == node)
      return node;

    return parent[node] = findUPar(parent[node]);
  }

  void unionBySize(int u, int v)
  {

    int u_paru = findUPar(u);
    int u_parv = findUPar(v);
    if (u_paru == u_parv)
      return;
    if (size[u_paru] > size[u_parv])
    {
      size[u_paru] += size[u_parv];
      parent[u_parv] = u_paru;
    }
    else
    {
      size[u_parv] += size[u_paru];
      parent[u_paru] = u_parv;
    }
  }
};

int main()
{
  int n, m;
  cin >> n >> m;
  DSU ds(n);
  while (m--)
  {
    int u, v;
    cin >> u >> v;
    ds.unionBySize(u, v);
  }

  set<int> st;
  vector<int> res;
  for (int i = 1; i <= n; i++)
  {
    int par = ds.findUPar(i);
    if (st.find(par) == st.end())
    {
      st.insert(par);
      res.push_back(par);
    }
  }
  cout << st.size() - 1 << endl;
  for (int i = 1; i < res.size(); i++)
  {
    cout << res[i - 1] << ' ' << res[i] << endl;
  }
}
